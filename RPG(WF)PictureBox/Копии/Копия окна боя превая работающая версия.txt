using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Игра
{
    public partial class Окно_боя : Form
    {
        public Окно_боя()
        {
            InitializeComponent();
        }
        static public int эффект_героя_защита;
        static public int эффект_героя_атака;
        static public int результат;
        int рез_атаки;
        int рез_атаки_на_броню;
        int o = 0;// переменая для эффектов действующих не в настоящий ход необходимо обнулять
        public void заполнение ()
        {
            textBox2.Text = "" + Основа.хар.Атака;
            textBox1.Text = "" + Основа.вар[Основа.o, Основа.r].Атака;
            textBox5.Text = "" + Основа.хар.Здоровье;
            textBox3.Text = "" + Основа.вар[Основа.o, Основа.r].Здоровье;
            textBox6.Text = "" + Основа.хар.Броня;
            textBox4.Text = "" + Основа.вар[Основа.o, Основа.r].Броня;
        }
        public void отключение_кнопок()
        {
            Уклонение.Enabled = false;
            Атака.Enabled = false;
            Отсупаем.Enabled = false;
            Защита.Enabled = false;
            Уклонение.Enabled = false;
        }
        public void Отсупаем_Click(object sender, EventArgs e)
        {
            Основа.атака_отступлеие = 2;
            Close();
        }
        private void Уклонение_Click(object sender, EventArgs e)
        {
            отключение_кнопок();
            эффект_героя_защита = 1;
            timer1.Start();
        }
        private void Защита_Click(object sender, EventArgs e)
        {
            отключение_кнопок();
            эффект_героя_защита = 2;
            timer1.Start();
        }
        private void Уселение_атаки_Click(object sender, EventArgs e)
        {
            отключение_кнопок();
            MessageBox.Show("Атака усилина в три раза");
            эффект_героя_атака = 1;
            Атака_Click(sender,e);
        }
        public void Атака_Click(object sender, EventArgs e)
        {
            if (o == 1)
            {
                эффект_героя_атака = 1;
            }
            отключение_кнопок();
                    if (эффект_героя_атака == 0)
                    {
                        обычная_атака_на_врага();
                    }
                    if (эффект_героя_атака == 1)
                    {
                        if (o == 0)
                        {
                            o = 1;
                            обычная_атака_врага();
                        }
                        else { o = 0; усилиная_атака_на_врага(); }
                    }
        }
        private void timer1_Tick(object sender, EventArgs e)
        {
            if (эффект_героя_защита == 2)
            {
                атака_с_защитой_героя();
            }
            if (эффект_героя_защита == 1)
            {
                атака_с_уклонением_героя();
            }
            if (эффект_героя_защита == 0)
            {
                обычная_атака_врага();
            }
        }
        // ВАРИАЦИИ АТАКИ НА ГЕРОЯ
        public void обычная_атака_врага()
        {
            timer1.Stop();
            if (Основа.хар.Броня == 0)
            {
                рез_атаки = Основа.хар.Здоровье - Основа.вар[Основа.o, Основа.r].Атака;
                Основа.хар.Здоровье = рез_атаки;
            }
            if (Основа.хар.Броня > 0)
            {
                рез_атаки_на_броню = Основа.хар.Броня - Основа.вар[Основа.o, Основа.r].Атака;
                if (рез_атаки_на_броню > 0)
                {
                    Основа.хар.Броня = рез_атаки_на_броню;
                }
                else
                {
                    Основа.хар.Броня = 0;
                    рез_атаки = Основа.хар.Здоровье - Math.Abs(рез_атаки_на_броню);
                    Основа.хар.Здоровье = рез_атаки;
                }
            }
            if (Основа.хар.Здоровье <= 0)
            {
                результат = 2;
            }
            результат_боя();
        }
        public void атака_с_уклонением_героя()
        {
            timer1.Stop();
            Random j = new Random();
            int k = j.Next(0, 2);
            if (k == 0)
            {
                MessageBox.Show("Уклонение");
                результат_боя();
                return;
            }
            if (k == 1)
            {
                обычная_атака_врага();
            }
        }
        public void атака_с_защитой_героя()
        {
            timer1.Stop();
            if (Основа.хар.Броня == 0)
            {
                рез_атаки = Основа.хар.Здоровье - (Основа.вар[Основа.o, Основа.r].Атака / 2);
                Основа.хар.Здоровье = рез_атаки;
            }
            if (Основа.хар.Броня > 0)
            {
                рез_атаки_на_броню = Основа.хар.Броня - (Основа.вар[Основа.o, Основа.r].Атака / 2);
                if (рез_атаки_на_броню > 0)
                {
                    Основа.хар.Броня = рез_атаки_на_броню;
                }
                else
                {
                    Основа.хар.Броня = 0;
                    рез_атаки = Основа.хар.Здоровье - Math.Abs(рез_атаки_на_броню);
                    Основа.хар.Здоровье = рез_атаки;
                }
            }
            if (Основа.хар.Здоровье <= 0)
            {
                результат = 2;
            }
            результат_боя();
        }
        // ВАРИАЦИИ АТАКИ НА ВРАГА
        public void обычная_атака_на_врага()
        {
            if (Основа.вар[Основа.o, Основа.r].Броня == 0)
            {
                рез_атаки = Основа.вар[Основа.o, Основа.r].Здоровье - Основа.хар.Атака;
                Основа.вар[Основа.o, Основа.r].Здоровье = рез_атаки;
            }
            if (Основа.вар[Основа.o, Основа.r].Броня > 0)
            {
                рез_атаки_на_броню = Основа.вар[Основа.o, Основа.r].Броня - Основа.хар.Атака;
                if (рез_атаки_на_броню > 0)
                {
                    Основа.вар[Основа.o, Основа.r].Броня = рез_атаки_на_броню;
                }
                else
                {
                    Основа.вар[Основа.o, Основа.r].Броня = 0;
                    рез_атаки = Основа.вар[Основа.o, Основа.r].Здоровье - Math.Abs(рез_атаки_на_броню);
                    Основа.вар[Основа.o, Основа.r].Здоровье = рез_атаки;
                }
            }
            if (Основа.вар[Основа.o, Основа.r].Здоровье <= 0)
            {
                результат = 1;
            }
            if (Основа.вар[Основа.o, Основа.r].Здоровье > 0) { заполнение(); timer1.Start(); } else { результат_боя(); }
        }
        public void усилиная_атака_на_врага()
        {
            if (Основа.вар[Основа.o, Основа.r].Броня == 0)
            {
                рез_атаки = Основа.вар[Основа.o, Основа.r].Здоровье - (Основа.хар.Атака*3);
                Основа.вар[Основа.o, Основа.r].Здоровье = рез_атаки;
            }
            if (Основа.вар[Основа.o, Основа.r].Броня > 0)
            {
                рез_атаки_на_броню = Основа.вар[Основа.o, Основа.r].Броня - (Основа.хар.Атака * 3);
                if (рез_атаки_на_броню > 0)
                {
                    Основа.вар[Основа.o, Основа.r].Броня = рез_атаки_на_броню;
                }
                else
                {
                    Основа.вар[Основа.o, Основа.r].Броня = 0;
                    рез_атаки = Основа.вар[Основа.o, Основа.r].Здоровье - Math.Abs(рез_атаки_на_броню);
                    Основа.вар[Основа.o, Основа.r].Здоровье = рез_атаки;
                }
            }
            if (Основа.вар[Основа.o, Основа.r].Здоровье <= 0)
            {
                результат = 1;
            }
            if (Основа.вар[Основа.o, Основа.r].Здоровье > 0) { заполнение(); timer1.Start(); } else { результат_боя(); }
        }
        public void результат_боя()
        {
            if (результат == 1)
            {
                MessageBox.Show("Победа!");
            }
            if (результат == 1)
            {
                Основа.результат_атаки = 1;
                Основа.атака_отступлеие = 1;
                результат = 0;
                Close();
            }
            if (результат == 2)
            {
                MessageBox.Show("Пораженеие");
            }
            if (результат == 2)
            {
                Основа.результат_атаки = 2;
                Основа.атака_отступлеие = 1;
                результат = 0;
                Close();
            }
            Уклонение.Enabled = true;
            Атака.Enabled = true;
            Отсупаем.Enabled = true;
            Защита.Enabled = true;
            Уклонение.Enabled = true;
            эффект_героя_атака = 0;
            эффект_героя_атака = 0;
            заполнение();
        } 
    }
}
