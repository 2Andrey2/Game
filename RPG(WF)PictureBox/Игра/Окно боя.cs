using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Игра
{
    public partial class Окно_боя : Form
    {
        public Окно_боя()
        {
            InitializeComponent();
        }
        public int эффект_врага;
        public int эффект_героя;
        static public int результат;
        public int кто_атакует;
        int рез_атаки;
        int рез_атаки_на_броню;
        public void заполнение ()
        {
            textBox2.Text = "" + Основа.хар.Атака;
            textBox1.Text = "" + Основа.вар[Основа.o, Основа.r].Атака;
            textBox5.Text = "" + Основа.хар.Здоровье;
            textBox3.Text = "" + Основа.вар[Основа.o, Основа.r].Здоровье;
            textBox6.Text = "" + Основа.хар.Броня;
            textBox4.Text = "" + Основа.вар[Основа.o, Основа.r].Броня;
        }
        public void отключение_кнопок()
        {
            Уклонение.Enabled = false;
            Атака.Enabled = false;
            Отсупаем.Enabled = false;
            Защита.Enabled = false;
            Уклонение.Enabled = false;
        }
        public void Отсупаем_Click(object sender, EventArgs e)
        {
            Основа.атака_отступлеие = 2;
            Close();
        }
        private void Уклонение_Click(object sender, EventArgs e)
        {
            отключение_кнопок();
            эффект_героя = 1;
            мозги_врага();
        }
        private void Защита_Click(object sender, EventArgs e)
        {
            отключение_кнопок();
            эффект_героя = 2;
            мозги_врага();
        }
        private void Уселение_атаки_Click(object sender, EventArgs e)
        {
            отключение_кнопок();
            эффект_героя = 3;
            мозги_врага();
        }
        public void Атака_Click(object sender, EventArgs e)
        {
            мозги_врага();
        }
        bool уклонение_героя;
        bool уклонение_врага;
        bool защита_героя;
        bool защита_врага;
        public int атака_героя;
        public int атака_врага1;
        int o = 0;// переменая для эффектов действующих не в настоящий ход необходимо обнулять
        int p = 0;// переменая для эффектов действующих не в настоящий ход необходимо обнулять
        public void обработчик()
        {
            if (кто_атакует == 0)
            {
                if (уклонение_врага == true)
                {
                    уклонение_врага = false;
                    Random i = new Random();
                    int t = i.Next(0, 2);
                    if (t == 0)
                    {
                        кто_атакует = 1;
                        MessageBox.Show("Враг уклонился");
                        goto avbl;
                    }
                }
                if (эффект_героя == 0)
                {

                    атака_героя = Основа.хар.Атака;
                    кто_атакует = 1;
                    атака_на_врага();
                }
                if (эффект_героя == 1)
                {
                    уклонение_героя = true;
                    кто_атакует = 1;
                }
                if (эффект_героя == 2)
                {
                    защита_героя = true;
                    MessageBox.Show("Защита героя увеличина в 2 раза");
                    кто_атакует = 1;
                }
                if (эффект_героя == 3)
                {
                    if (o == 0)
                    { o = 1; MessageBox.Show("Атака героя увеличина в 3 раза"); кто_атакует = 1; }
                    else
                    {
                        o = 0;
                        атака_героя = Основа.хар.Атака * 3;
                        кто_атакует = 1;
                        атака_на_врага();
                    }
                }
            }
            avbl:
            if (кто_атакует == 1)
            {
                if (уклонение_героя == true)
                {
                    уклонение_героя = false;
                    Random i = new Random();
                    int t = i.Next(0,2);
                    if (t == 0)
                    {
                        кто_атакует = 0;
                        MessageBox.Show("Герой уклонился");
                        результат_боя();
                    }
                }
                if (эффект_врага == 0)
                {
                    атака_врага1 = Основа.вар[Основа.o, Основа.r].Атака;
                    кто_атакует = 0;
                    timer1.Start();
                }
                if (эффект_врага == 1)
                {
                    уклонение_врага = true;
                    MessageBox.Show("Враг хочет уклониться");
                    кто_атакует = 0;
                }
                if (эффект_врага == 2)
                {
                    защита_врага = true;
                    MessageBox.Show("Защита врага увеличина в 2 раза");
                    кто_атакует = 0;
                }
                if (эффект_врага == 3)
                {
                    if (p == 0)
                    { p = 1; MessageBox.Show("Атака врага увеличина в 3 раза"); кто_атакует = 0; }
                    else
                    {
                        p = 0;
                        атака_врага1 = Основа.вар[Основа.o, Основа.r].Атака * 2;
                        кто_атакует = 0;
                        timer1.Start();
                    }
                }
            }
            Уклонение.Enabled = true;
            Атака.Enabled = true;
            Отсупаем.Enabled = true;
            Защита.Enabled = true;
            Уклонение.Enabled = true;
        }
        public void мозги_врага()
        {
            Random i = new Random();
            int t = i.Next(0, 6);
            if (p == 1)
            {
                t = 3;
            }
            if (t== 1)
            { эффект_врага = 1; }
            if (t == 2)
            { эффект_врага = 2; }
            if (t == 3)
            { эффект_врага = 3; }
            обработчик();
        }
        // ВАРИАЦИИ АТАКИ НА ГЕРОЯ
        private void timer1_Tick(object sender, EventArgs e)
        {
            атака_врага();
        }
        public void атака_врага()
        {
            timer1.Stop();
            if (защита_героя == true)
            {
                защита_героя = false;
                атака_врага1 = атака_врага1 / 2;
            }
            if (Основа.хар.Броня == 0)
            {
                рез_атаки = Основа.хар.Здоровье - атака_врага1;
                Основа.хар.Здоровье = рез_атаки;
            }
            if (Основа.хар.Броня > 0)
            {
                рез_атаки_на_броню = Основа.хар.Броня - атака_врага1;
                if (рез_атаки_на_броню > 0)
                {
                    Основа.хар.Броня = рез_атаки_на_броню;
                }
                else
                {
                    Основа.хар.Броня = 0;
                    рез_атаки = Основа.хар.Здоровье - Math.Abs(рез_атаки_на_броню);
                    Основа.хар.Здоровье = рез_атаки;
                }
            }
            if (Основа.хар.Здоровье <= 0)
            {
                результат = 2;
            }
            результат_боя();
        }
        // ВАРИАЦИИ АТАКИ НА ВРАГА
        public void атака_на_врага()
        {
            if (защита_врага == true)
            {
                защита_врага = false;
                атака_героя = атака_героя / 2;
            }
            if (Основа.вар[Основа.o, Основа.r].Броня == 0)
            {
                рез_атаки = Основа.вар[Основа.o, Основа.r].Здоровье - атака_героя;
                Основа.вар[Основа.o, Основа.r].Здоровье = рез_атаки;
            }
            if (Основа.вар[Основа.o, Основа.r].Броня > 0)
            {
                рез_атаки_на_броню = Основа.вар[Основа.o, Основа.r].Броня - атака_героя;
                if (рез_атаки_на_броню > 0)
                {
                    Основа.вар[Основа.o, Основа.r].Броня = рез_атаки_на_броню;
                }
                else
                {
                    Основа.вар[Основа.o, Основа.r].Броня = 0;
                    рез_атаки = Основа.вар[Основа.o, Основа.r].Здоровье - Math.Abs(рез_атаки_на_броню);
                    Основа.вар[Основа.o, Основа.r].Здоровье = рез_атаки;
                }
            }
            if (Основа.вар[Основа.o, Основа.r].Здоровье <= 0)
            {
                результат = 1;
            }
            if (Основа.вар[Основа.o, Основа.r].Здоровье > 0) { заполнение(); } else { результат_боя(); }
        }
        public void результат_боя()
        {
            if (результат == 1)
            {
                MessageBox.Show("Победа!");
            }
            if (результат == 1)
            {
                Основа.результат_атаки = 1;
                Основа.атака_отступлеие = 1;
                результат = 0;
                Close();
            }
            if (результат == 2)
            {
                MessageBox.Show("Пораженеие");
            }
            if (результат == 2)
            {
                Основа.результат_атаки = 2;
                Основа.атака_отступлеие = 1;
                результат = 0;
                Close();
            }
            эффект_героя = 0;
            заполнение();
        } 
    }
}
